Subject: [PATCH] Disable controller repaint
---
Index: mc_mitm/source/controllers/emulated_switch_controller.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mc_mitm/source/controllers/emulated_switch_controller.cpp b/mc_mitm/source/controllers/emulated_switch_controller.cpp
--- a/mc_mitm/source/controllers/emulated_switch_controller.cpp	(revision 2f5e9b999f0b90b8cfb25586330516802fadf1e4)
+++ b/mc_mitm/source/controllers/emulated_switch_controller.cpp	(revision 02386742db6880d5efebd57c0bbe82425fdecb14)
@@ -367,12 +367,12 @@
 
         R_TRY(m_virtual_memory.Read(read_addr, response.data.serial_flash_read.data, read_size));
 
-        if (read_addr == 0x6050) {
-            if (ams::mitm::GetSystemLanguage() == 10) {
-                u8 data[] = {0xff, 0xd7, 0x00, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7};
-                std::memcpy(response.data.serial_flash_read.data, data, sizeof(data));
-            }
-        }
+//        if (read_addr == 0x6050) {
+//            if (ams::mitm::GetSystemLanguage() == 10) {
+//                u8 data[] = {0xff, 0xd7, 0x00, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7};
+//                std::memcpy(response.data.serial_flash_read.data, data, sizeof(data));
+//            }
+//        }
 
         return this->FakeHidCommandResponse(&response);
     }
Index: mc_mitm/source/controllers/switch_controller.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mc_mitm/source/controllers/switch_controller.cpp b/mc_mitm/source/controllers/switch_controller.cpp
--- a/mc_mitm/source/controllers/switch_controller.cpp	(revision 2f5e9b999f0b90b8cfb25586330516802fadf1e4)
+++ b/mc_mitm/source/controllers/switch_controller.cpp	(revision 02386742db6880d5efebd57c0bbe82425fdecb14)
@@ -89,16 +89,16 @@
         this->UpdateControllerState(report);
 
         auto input_report = reinterpret_cast<SwitchInputReport *>(m_input_report.data);
-        if (input_report->id == 0x21) {
-            if (input_report->type0x21.hid_command_response.id == HidCommand_SerialFlashRead) {
-                if (input_report->type0x21.hid_command_response.data.serial_flash_read.address == 0x6050) {
-                    if (ams::mitm::GetSystemLanguage() == 10) {
-                        u8 data[] = {0xff, 0xd7, 0x00, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7};
-                        std::memcpy(input_report->type0x21.hid_command_response.data.serial_flash_read.data, data, sizeof(data));
-                    }
-                }
-            }
-        }
+//        if (input_report->id == 0x21) {
+//            if (input_report->type0x21.hid_command_response.id == HidCommand_SerialFlashRead) {
+//                if (input_report->type0x21.hid_command_response.data.serial_flash_read.address == 0x6050) {
+//                    if (ams::mitm::GetSystemLanguage() == 10) {
+//                        u8 data[] = {0xff, 0xd7, 0x00, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7, 0x00, 0x57, 0xb7};
+//                        std::memcpy(input_report->type0x21.hid_command_response.data.serial_flash_read.data, data, sizeof(data));
+//                    }
+//                }
+//            }
+//        }
 
         this->ApplyButtonCombos(&input_report->buttons); 
 
